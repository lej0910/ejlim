import pandas as pd
import ast

df = pd.read_csv('/Users/lunit/Documents/medicom_test/medicom_1_6.csv', encoding='utf-8-sig', low_memory=False)
df = df.fillna('')


'''
remove the outliers
'''

df = df.loc[(df['View Modifier Code Sequence Meaning'] == '') &
                (df['Presentation Intent Type'] != 'FOR PROCESSING')&
                (df['Estimated Radiographic Magnification Factor'].replace('', 0) < 1.5)&
                (df['Breast Implant Present'] != 'Yes')&
                (df['Study_Description'].str.contains('STEREOTACTIC|SPECIMEN')!= True)]



'''
parse the lable
'''

def infer_scan_type(df):
    try:
        num_frame = int(df['Number of Frames'])
    except ValueError:
        num_frame = 0
    series_description = df['Series_Description']
    if num_frame > 1:
        return "3D"
    elif 'tomosynthesis' in series_description.lower() or 'ROUTINE3D_VOL' in series_description:
        return "3D"
    elif 'preview' in series_description.lower() or \
            'c-view' in series_description.lower():
            # '3D_PROJ' in series_description or \ # 3D Proj is removed
        return "S2D"
    else:
        if df['Window Center'] == '' or df['Window Width'] == '':
            return "unused"
        else:
            return "2D"



def get_view_type(df):
    laterality = df['Image Laterality']
    sereis_description = df['Series_Description']
    view_position = df['View Position']
    po = df['Patient Orientation']
    plane_orientation = df['Plane Orientation'].replace("'","")
    
    no_dicom = ['_R2']
    views = ['XCCL','XCCM','CC','MLO','LMO','ML','LM']
    VCSM_to_VIEW_POSITION = {
    'medio-lateral oblique': 'MLO',
    'cranio-caudal': 'CC',
    'medio-lateral': 'ML',
    'latero-medial': 'LM'
}
    

    for sd in no_dicom:
        if sd in sereis_description:
            return ''
    for sd in views:
        if sd in sereis_description:
            return laterality + sd

        elif laterality != '' and view_position != '' :
            return laterality + view_position
              
        elif laterality != '':
            vcsm = df['View Code Sequence Meaning'] if 'View Code Sequence Meaning' in df else ''
            try:
                vcsm_view = VCSM_to_VIEW_POSITION[vcsm]
                return laterality + vcsm_view
            except KeyError:
                pass
        
        else:
            if po == "['A', 'R']":
                return 'LCC'
            elif po == "['P', 'L']":
                return 'RCC'
            elif po == "['A', 'FR']":
                return 'LMLO'
            elif po == "['P', 'FL']":
                return 'RMLO'
            elif po == "['A', 'F']":
                return 'LML'
            elif po == "['P', 'F']":
                return 'RML'
        
        if plane_orientation:
            plane_orientation = ast.literal_eval(plane_orientation)
        else:
            return ''
        laterality = 'R' if int(plane_orientation[1]) == 1 else 'L'
        if abs(plane_orientation[3]) > 1.0:
            return ''
        elif abs(plane_orientation[3]) > 0.9:
            view_position = 'CC'

        else:
            view_position = 'MLO'
        return laterality + view_position



def sum_rows_columns(df):
    if df['Rows'] != '' and df['Columns'] != '' :
        return int(df['Rows']) + int(df['Columns']) 



def replace_view_type(df):
    view_type = df['view_type']
    LCC = 'LCC|LXCCL|LXCCM'
    RCC = 'RCC|RXCCL|RXCCM'
    LMLO = 'LMLO|LLM|LML|LLMO'
    RMLO = 'RMLO|RLM|RML|RLMO'

    if view_type != '' :
        if view_type in LCC :
            return 'LCC'
        elif view_type in RCC :
            return 'RCC'
        elif view_type in LMLO :
            return 'LMLO'
        elif view_type in RMLO :
            return 'RMLO'
        else:
            return ''



def priority_4view_type(df):
    view_type = df['view_type']
    first = 'LCC|RCC|LMLO|RMLO'

    if view_type != '' :
        if view_type in first :
            return int(2)
        else:
            return int(1)



def get_group_info(df):
    path = df['Path']

    if 'Group A' in path:
        return 'A'
    elif 'Group B' in path:
        return 'B'
    elif 'Group C' in path:
        return 'C'
    elif 'Group D' in path:
        return 'D'
    else :
        return ''



df['group'] = df.apply(get_group_info, axis=1)
df["scan_type"] = df.apply(infer_scan_type, axis=1)
df["view_type"] = df.apply(get_view_type, axis=1)
df["4view_type"] = df.apply(replace_view_type, axis=1)
df["priority"] = df.apply(priority_4view_type, axis=1)
df["resolution"] = df.apply(sum_rows_columns, axis=1)

df['duplicated'] = df['Study_Instance_UID'] + "_" + df['scan_type'] + "_" + df['4view_type']
df = df.loc[df['view_type'] != ''] .sort_values(by=['duplicated', 'priority','Number of Frames']).drop_duplicates(subset=['duplicated'], keep = 'last')
df = df.loc[df['4view_type'] != '']

df.to_csv('/Users/lunit/Documents/medicom_test/medicom_bx_file/medicom_dicom.csv')
